// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using UserManager.Models;

namespace UserManager.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20180522130638_0001_InitTables")]
    partial class _0001_InitTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserManager.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("UserManager.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Countrys");
                });

            modelBuilder.Entity("UserManager.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("UserManager.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("UserManager.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuss");
                });

            modelBuilder.Entity("UserManager.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Menu2Id");

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MenuURL")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("Menu2Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("UserManager.Models.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsCreate");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsRead");

                    b.Property<bool?>("IsUpdate");

                    b.Property<int?>("MenuId");

                    b.Property<int?>("RoleId")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermissions");
                });

            modelBuilder.Entity("UserManager.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserManager.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RoleId")
                        .IsRequired();

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("UserManager.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("UserManager.Models.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime>("Dated");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmailSignature");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("MaritalStatusId")
                        .IsRequired();

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<string>("ProfilePicture");

                    b.Property<Guid?>("User2Id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("User2Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserManager.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int?>("AddressTypeId")
                        .IsRequired();

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresss");
                });

            modelBuilder.Entity("UserManager.Models.UserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("UserManager.Models.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LanguageId")
                        .IsRequired();

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("UserManager.Models.UserMapLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMapLocations");
                });

            modelBuilder.Entity("UserManager.Models.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("UserManager.Models.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoardUniversity")
                        .HasMaxLength(50);

                    b.Property<string>("FromYear")
                        .HasMaxLength(10);

                    b.Property<string>("OutOfMarks")
                        .HasMaxLength(50);

                    b.Property<string>("Percentage")
                        .HasMaxLength(50);

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ToYear")
                        .HasMaxLength(10);

                    b.Property<string>("TotalMarks")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("UserManager.Models.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SettingGroup")
                        .HasMaxLength(100);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SettingValue")
                        .IsRequired();

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("UserManager.Models.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("UserManager.Models.UserWorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("From");

                    b.Property<string>("JobDescription");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("To");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWorkExperiences");
                });

            modelBuilder.Entity("UserManager.Models.Menu", b =>
                {
                    b.HasOne("UserManager.Models.Menu", "Menu2")
                        .WithMany("Menu_ParentIds")
                        .HasForeignKey("Menu2Id");
                });

            modelBuilder.Entity("UserManager.Models.MenuPermission", b =>
                {
                    b.HasOne("UserManager.Models.Menu", "Menu_MenuId")
                        .WithMany("MenuPermission_MenuIds")
                        .HasForeignKey("MenuId");

                    b.HasOne("UserManager.Models.Role", "Role_RoleId")
                        .WithMany("MenuPermission_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("MenuPermission_UserIds")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UserManager.Models.RoleUser", b =>
                {
                    b.HasOne("UserManager.Models.Role", "Role_RoleId")
                        .WithMany("RoleUser_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("RoleUser_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.State", b =>
                {
                    b.HasOne("UserManager.Models.Country", "Country_CountryId")
                        .WithMany("State_CountryIds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.User", b =>
                {
                    b.HasOne("UserManager.Models.Gender", "Gender_GenderId")
                        .WithMany("User_GenderIds")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.MaritalStatus", "MaritalStatus_MaritalStatusId")
                        .WithMany("User_MaritalStatusIds")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.User", "User2")
                        .WithMany("User_ParentIds")
                        .HasForeignKey("User2Id");
                });

            modelBuilder.Entity("UserManager.Models.UserAddress", b =>
                {
                    b.HasOne("UserManager.Models.AddressType", "AddressType_AddressTypeId")
                        .WithMany("UserAddress_AddressTypeIds")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserAddress_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserEmail", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserEmail_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserLanguage", b =>
                {
                    b.HasOne("UserManager.Models.Language", "Language_LanguageId")
                        .WithMany("UserLanguage_LanguageIds")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserLanguage_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserMapLocation", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserMapLocation_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserPhone", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserPhone_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserQualification", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserQualification_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserSetting", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserSetting_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserSkill", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserSkill_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.Models.UserWorkExperience", b =>
                {
                    b.HasOne("UserManager.Models.User", "User_UserId")
                        .WithMany("UserWorkExperience_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
