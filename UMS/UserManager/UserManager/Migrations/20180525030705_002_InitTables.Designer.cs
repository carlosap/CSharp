// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManager;

namespace UserManager.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20180525030705_002_InitTables")]
    partial class _002_InitTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserManager.Menu", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MenuURL")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<Guid?>("Menu_ParentIdId");

                    b.Property<Guid?>("ParentId");

                    b.Property<int?>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("Menu_ParentIdId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("UserManager.MenuPermission", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsCreate");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsRead");

                    b.Property<bool?>("IsUpdate");

                    b.Property<Guid?>("MenuId")
                        .IsRequired();

                    b.Property<Guid?>("RoleId")
                        .IsRequired();

                    b.Property<int?>("SortOrder");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermissions");
                });

            modelBuilder.Entity("UserManager.Role", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserManager.RoleUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RoleId")
                        .IsRequired();

                    b.Property<Guid?>("Role_RoleIdId");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Role_RoleIdId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("UserManager.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(400);

                    b.Property<short>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Address1")
                        .HasMaxLength(100);

                    b.Property<string>("AppName")
                        .HasMaxLength(30);

                    b.Property<string>("Avatar")
                        .HasMaxLength(400);

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(15);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DoB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmailProvider")
                        .HasMaxLength(20);

                    b.Property<string>("EmailSignature")
                        .HasMaxLength(100);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15);

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<bool>("LockEnabled");

                    b.Property<string>("LockoutDescription")
                        .HasMaxLength(400);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<Guid?>("ReportsToId");

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .HasMaxLength(10);

                    b.Property<string>("WebPage")
                        .HasMaxLength(400);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ReportsToId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserManager.UserAddress", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Address1")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("UserManager.UserAttachment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("FileData");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Path");

                    b.Property<string>("ReferringDocument");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("UserManager.UserAttribute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAttributes");
                });

            modelBuilder.Entity("UserManager.UserComment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(400);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Format")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("UserManager.UserEmail", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmailSignature")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Provider")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("UserManager.UserGeoLocation", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserGeoLocations");
                });

            modelBuilder.Entity("UserManager.UserKnownAssociate", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(400);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Address1")
                        .HasMaxLength(100);

                    b.Property<string>("AvatarProfile")
                        .HasMaxLength(400);

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(15);

                    b.Property<string>("City")
                        .HasMaxLength(20);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DoB");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .HasMaxLength(30);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15);

                    b.Property<string>("Province")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.Property<string>("WebPage")
                        .HasMaxLength(400);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserKnownAssociates");
                });

            modelBuilder.Entity("UserManager.UserLanguage", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("UserManager.UserName", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("FullName")
                        .HasMaxLength(50);

                    b.Property<string>("GivenName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNames");
                });

            modelBuilder.Entity("UserManager.UserNationality", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNationalities");
                });

            modelBuilder.Entity("UserManager.UserOrigin", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DoB");

                    b.Property<string>("Format")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("State")
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrigins");
                });

            modelBuilder.Entity("UserManager.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Notes")
                        .HasMaxLength(400);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Type")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("UserManager.UserPhysicalDescription", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(15);

                    b.Property<string>("Format")
                        .HasMaxLength(15);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhysicalDescriptions");
                });

            modelBuilder.Entity("UserManager.UserQualification", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoardUniversity")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("FromYear");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("OutOfMarks")
                        .HasMaxLength(100);

                    b.Property<short>("Percentage");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ToYear");

                    b.Property<string>("TotalMarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("UserManager.UserRelationship", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(400);

                    b.Property<string>("Justification")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRelationships");
                });

            modelBuilder.Entity("UserManager.UserSetting", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("SettingGroup")
                        .HasMaxLength(100);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SettingValue")
                        .IsRequired();

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("UserManager.UserSkill", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(400);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("UserManager.UserSocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(400);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(50);

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(50);

                    b.Property<string>("SocialMediaName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialMedias");
                });

            modelBuilder.Entity("UserManager.UserWorkExperience", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("From");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(400);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("To");

                    b.Property<Guid?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWorkExperiences");
                });

            modelBuilder.Entity("UserManager.Menu", b =>
                {
                    b.HasOne("UserManager.Menu", "Menu_ParentId")
                        .WithMany("Menu_ParentIds")
                        .HasForeignKey("Menu_ParentIdId");
                });

            modelBuilder.Entity("UserManager.MenuPermission", b =>
                {
                    b.HasOne("UserManager.Menu", "Menu_MenuId")
                        .WithMany("MenuPermission_MenuIds")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.Role", "Role_RoleId")
                        .WithMany("MenuPermission_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("MenuPermission_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.RoleUser", b =>
                {
                    b.HasOne("UserManager.Role", "Role_RoleId")
                        .WithMany("RoleUser_RoleIds")
                        .HasForeignKey("Role_RoleIdId");

                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("RoleUser_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.User", b =>
                {
                    b.HasOne("UserManager.User", "ReportsTo")
                        .WithMany("User_ParentIds")
                        .HasForeignKey("ReportsToId");
                });

            modelBuilder.Entity("UserManager.UserAddress", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserAddress_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserAttachment", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserAttribute", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserComment", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserEmail", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserEmail_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserGeoLocation", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserGeopLocation_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserKnownAssociate", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserLanguage", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserLanguage_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserName", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserNationality", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserOrigin", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserPhone", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserPhone_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserPhysicalDescription", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserQualification", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserQualification_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserRelationship", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserSetting", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserSetting_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserSkill", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserSkill_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserSocialMedia", b =>
                {
                    b.HasOne("UserManager.User", "User_IdentityId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UserManager.UserWorkExperience", b =>
                {
                    b.HasOne("UserManager.User", "User_UserId")
                        .WithMany("UserWorkExperience_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
