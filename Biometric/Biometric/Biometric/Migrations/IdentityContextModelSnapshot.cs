// <auto-generated />
using Biometric;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Biometric.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BI2R")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Biometric.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("Biometric.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Biometric.DerogatoryCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ClassificationString")
                        .HasColumnName("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Details")
                        .HasColumnName("Details");

                    b.Property<string>("Dissem")
                        .HasColumnName("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityDerogatoryId")
                        .IsRequired()
                        .HasColumnName("IdentityDerogatoryId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<string>("OwnerProducer")
                        .HasColumnName("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasColumnName("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk")
                        .HasColumnName("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasColumnName("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("UserID")
                        .HasColumnName("UserID")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDerogatoryId");

                    b.ToTable("DerogatoryCategories");
                });

            modelBuilder.Entity("Biometric.DerogatorySubCategory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Details");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityDerogatoryId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdentityDerogatoryId");

                    b.ToTable("DerogatorySubCategories");
                });

            modelBuilder.Entity("Biometric.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Biometric.Identity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ATPScore");

                    b.Property<string>("About");

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId")
                        .IsRequired();

                    b.Property<Guid?>("Identity2Id");

                    b.Property<string>("IdentityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int?>("MaritalStatusId")
                        .IsRequired();

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("URI");

                    b.Property<string>("USPerson");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("Identity2Id");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("Biometric.IdentityAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int?>("AddressTypeId")
                        .IsRequired();

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityAddresss");
                });

            modelBuilder.Entity("Biometric.IdentityAttachment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("Path");

                    b.Property<string>("ReferringDocument");

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityAttachments");
                });

            modelBuilder.Entity("Biometric.IdentityAttribute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityAttributes");
                });

            modelBuilder.Entity("Biometric.IdentityComment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("Format")
                        .HasMaxLength(20);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityComments");
                });

            modelBuilder.Entity("Biometric.IdentityDerogatory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovalDate");

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Justification");

                    b.Property<string>("NominationDate");

                    b.Property<string>("NominatorGroup");

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("Region")
                        .HasMaxLength(100);

                    b.Property<string>("Source");

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityDerogatories");
                });

            modelBuilder.Entity("Biometric.IdentityEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmailSignature");

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityEmails");
                });

            modelBuilder.Entity("Biometric.IdentityEncounter", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<DateTime>("EncounterDate");

                    b.Property<string>("Format")
                        .HasMaxLength(20);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Location");

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("Reason");

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityEncounters");
                });

            modelBuilder.Entity("Biometric.IdentityGeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityGeoLocations");
                });

            modelBuilder.Entity("Biometric.IdentityIdentifier", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("IdentificationNumber");

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityIdentifiers");
                });

            modelBuilder.Entity("Biometric.IdentityKnownAssociate", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bid");

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityKnownAssociates");
                });

            modelBuilder.Entity("Biometric.IdentityLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<int?>("LanguageId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.HasIndex("LanguageId");

                    b.ToTable("IdentityLanguages");
                });

            modelBuilder.Entity("Biometric.IdentityName", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("FullName")
                        .HasMaxLength(50);

                    b.Property<string>("GivenName")
                        .HasMaxLength(50);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityNames");
                });

            modelBuilder.Entity("Biometric.IdentityNationality", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100);

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(100);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Nationality")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityNationalities");
                });

            modelBuilder.Entity("Biometric.IdentityOrigin", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("Format")
                        .HasMaxLength(20);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityOrigins");
                });

            modelBuilder.Entity("Biometric.IdentityPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityPhones");
                });

            modelBuilder.Entity("Biometric.IdentityPhysicalDescription", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("Format");

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityPhysicalDescriptions");
                });

            modelBuilder.Entity("Biometric.IdentityQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BoardUniversity")
                        .HasMaxLength(50);

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<string>("FromYear")
                        .HasMaxLength(10);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OutOfMarks")
                        .HasMaxLength(50);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("Percentage")
                        .HasMaxLength(50);

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("ToYear")
                        .HasMaxLength(10);

                    b.Property<string>("TotalMarks")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityQualifications");
                });

            modelBuilder.Entity("Biometric.IdentityRelationship", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Justification");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityRelationships");
                });

            modelBuilder.Entity("Biometric.IdentitySkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentitySkills");
                });

            modelBuilder.Entity("Biometric.IdentitySocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(200);

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(50);

                    b.Property<string>("ProfileUrl")
                        .HasMaxLength(50);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentitySocialMedias");
                });

            modelBuilder.Entity("Biometric.IdentityWorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassificationString")
                        .HasMaxLength(30);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Dissem")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("From");

                    b.Property<Guid?>("IdentityId")
                        .IsRequired();

                    b.Property<string>("JobDescription");

                    b.Property<string>("OwnerProducer")
                        .HasMaxLength(30);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SrcConfidence")
                        .HasMaxLength(100);

                    b.Property<string>("SrcIdpk");

                    b.Property<string>("SrcName")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("To");

                    b.Property<string>("UserID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("IdentityWorkExperiences");
                });

            modelBuilder.Entity("Biometric.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Biometric.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("Biometric.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Biometric.DerogatoryCategory", b =>
                {
                    b.HasOne("Biometric.IdentityDerogatory", "IdentityDerogatory_IdentityDerogatoryId")
                        .WithMany()
                        .HasForeignKey("IdentityDerogatoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.DerogatorySubCategory", b =>
                {
                    b.HasOne("Biometric.IdentityDerogatory", "IdentityDerogatory_IdentityDerogatoryId")
                        .WithMany()
                        .HasForeignKey("IdentityDerogatoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.Identity", b =>
                {
                    b.HasOne("Biometric.Gender", "Gender_GenderId")
                        .WithMany("Identity_GenderIds")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biometric.Identity", "Identity2")
                        .WithMany("Identity_ParentIds")
                        .HasForeignKey("Identity2Id");

                    b.HasOne("Biometric.MaritalStatus", "MaritalStatus_MaritalStatusId")
                        .WithMany("Identity_MaritalStatusIds")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityAddress", b =>
                {
                    b.HasOne("Biometric.AddressType", "AddressType_AddressTypeId")
                        .WithMany("UserAddress_AddressTypeIds")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biometric.Identity", "User_UserId")
                        .WithMany("IdentityAddress_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityAttachment", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityAttachment_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityAttribute", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityAttribute_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityComment", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityComment_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityDerogatory", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityDerogatory_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityEmail", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityEmail_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityEncounter", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityEncounter_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityGeoLocation", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityGeoLocation_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityIdentifier", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityIdentifier_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityKnownAssociate", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityKnownAssociate_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityLanguage", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityLanguage_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biometric.Language", "Language_LanguageId")
                        .WithMany("IdentityLanguage_LanguageIds")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityName", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityName_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityNationality", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityNationality_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityOrigin", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityOrigin_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityPhone", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityPhone_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityPhysicalDescription", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityPhysicalDescription_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityQualification", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityQualification_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityRelationship", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityRelationship_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentitySkill", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentitySkill_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentitySocialMedia", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentitySocialMedia_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.IdentityWorkExperience", b =>
                {
                    b.HasOne("Biometric.Identity", "Identity_IdentityId")
                        .WithMany("IdentityWorkExperience_IdentityIds")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biometric.State", b =>
                {
                    b.HasOne("Biometric.Country", "Country_CountryId")
                        .WithMany("State_CountryIds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
